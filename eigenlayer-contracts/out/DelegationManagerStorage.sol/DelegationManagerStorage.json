{"abi":[{"type":"function","name":"DELEGATION_APPROVAL_TYPEHASH","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"allocationManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IAllocationManager"}],"stateMutability":"view"},{"type":"function","name":"beaconChainETHStrategy","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategy"}],"stateMutability":"view"},{"type":"function","name":"calculateDelegationApprovalDigestHash","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"},{"name":"_delegationApprover","type":"address","internalType":"address"},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"},{"name":"expiry","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"calculateWithdrawalRoot","inputs":[{"name":"withdrawal","type":"tuple","internalType":"struct IDelegationManagerTypes.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"completeQueuedWithdrawal","inputs":[{"name":"withdrawal","type":"tuple","internalType":"struct IDelegationManagerTypes.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"tokens","type":"address[]","internalType":"contract IERC20[]"},{"name":"receiveAsTokens","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"completeQueuedWithdrawals","inputs":[{"name":"withdrawals","type":"tuple[]","internalType":"struct IDelegationManagerTypes.Withdrawal[]","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"tokens","type":"address[][]","internalType":"contract IERC20[][]"},{"name":"receiveAsTokens","type":"bool[]","internalType":"bool[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"convertToDepositShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"withdrawableShares","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"cumulativeWithdrawalsQueued","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"totalQueued","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"decreaseDelegatedShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"curDepositShares","type":"uint256","internalType":"uint256"},{"name":"beaconChainSlashingFactorDecrease","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegateTo","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approverSignatureAndExpiry","type":"tuple","internalType":"struct ISignatureUtilsMixinTypes.SignatureWithExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"delegatedTo","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"operator","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"delegationApprover","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"delegationApproverSaltIsSpent","inputs":[{"name":"delegationApprover","type":"address","internalType":"address"},{"name":"salt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"spent","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"depositScalingFactor","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"domainSeparator","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"eigenPodManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IEigenPodManager"}],"stateMutability":"view"},{"type":"function","name":"getDepositedShares","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"address[]","internalType":"contract IStrategy[]"},{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getOperatorShares","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getOperatorsShares","inputs":[{"name":"operators","type":"address[]","internalType":"address[]"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"}],"outputs":[{"name":"","type":"uint256[][]","internalType":"uint256[][]"}],"stateMutability":"view"},{"type":"function","name":"getQueuedWithdrawal","inputs":[{"name":"withdrawalRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"withdrawal","type":"tuple","internalType":"struct IDelegationManagerTypes.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"getQueuedWithdrawalRoots","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"},{"type":"function","name":"getQueuedWithdrawals","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"withdrawals","type":"tuple[]","internalType":"struct IDelegationManagerTypes.Withdrawal[]","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"shares","type":"uint256[][]","internalType":"uint256[][]"}],"stateMutability":"view"},{"type":"function","name":"getSlashableSharesInQueue","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getWithdrawableShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"}],"outputs":[{"name":"withdrawableShares","type":"uint256[]","internalType":"uint256[]"},{"name":"depositShares","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"increaseDelegatedShares","inputs":[{"name":"staker","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"prevDepositShares","type":"uint256","internalType":"uint256"},{"name":"addedShares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"initialize","inputs":[{"name":"initialOwner","type":"address","internalType":"address"},{"name":"initialPausedStatus","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"isDelegated","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isOperator","inputs":[{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"minWithdrawalDelayBlocks","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"modifyOperatorDetails","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"newDelegationApprover","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"operatorShares","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"}],"outputs":[{"name":"shares","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"pendingWithdrawals","inputs":[{"name":"withdrawalRoot","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"pending","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"queueWithdrawals","inputs":[{"name":"params","type":"tuple[]","internalType":"struct IDelegationManagerTypes.QueuedWithdrawalParams[]","components":[{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"depositShares","type":"uint256[]","internalType":"uint256[]"},{"name":"__deprecated_withdrawer","type":"address","internalType":"address"}]}],"outputs":[{"name":"","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"redelegate","inputs":[{"name":"newOperator","type":"address","internalType":"address"},{"name":"newOperatorApproverSig","type":"tuple","internalType":"struct ISignatureUtilsMixinTypes.SignatureWithExpiry","components":[{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"expiry","type":"uint256","internalType":"uint256"}]},{"name":"approverSalt","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"withdrawalRoots","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"registerAsOperator","inputs":[{"name":"initDelegationApprover","type":"address","internalType":"address"},{"name":"allocationDelay","type":"uint32","internalType":"uint32"},{"name":"metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"slashOperatorShares","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"strategy","type":"address","internalType":"contract IStrategy"},{"name":"prevMaxMagnitude","type":"uint64","internalType":"uint64"},{"name":"newMaxMagnitude","type":"uint64","internalType":"uint64"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"strategyManager","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IStrategyManager"}],"stateMutability":"view"},{"type":"function","name":"undelegate","inputs":[{"name":"staker","type":"address","internalType":"address"}],"outputs":[{"name":"withdrawalRoots","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateOperatorMetadataURI","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"metadataURI","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"DelegationApproverUpdated","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"newDelegationApprover","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"DepositScalingFactorUpdated","inputs":[{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"newDepositScalingFactor","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorMetadataURIUpdated","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"metadataURI","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"OperatorRegistered","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"delegationApprover","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"OperatorSharesDecreased","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorSharesIncreased","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"staker","type":"address","indexed":false,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"shares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"OperatorSharesSlashed","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"strategy","type":"address","indexed":false,"internalType":"contract IStrategy"},{"name":"totalSlashedShares","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"SlashingWithdrawalCompleted","inputs":[{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SlashingWithdrawalQueued","inputs":[{"name":"withdrawalRoot","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"withdrawal","type":"tuple","indexed":false,"internalType":"struct IDelegationManagerTypes.Withdrawal","components":[{"name":"staker","type":"address","internalType":"address"},{"name":"delegatedTo","type":"address","internalType":"address"},{"name":"withdrawer","type":"address","internalType":"address"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"startBlock","type":"uint32","internalType":"uint32"},{"name":"strategies","type":"address[]","internalType":"contract IStrategy[]"},{"name":"scaledShares","type":"uint256[]","internalType":"uint256[]"}]},{"name":"sharesToWithdraw","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"StakerDelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"StakerForceUndelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"StakerUndelegated","inputs":[{"name":"staker","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"ActivelyDelegated","inputs":[]},{"type":"error","name":"CallerCannotUndelegate","inputs":[]},{"type":"error","name":"FullySlashed","inputs":[]},{"type":"error","name":"InputArrayLengthMismatch","inputs":[]},{"type":"error","name":"InputArrayLengthZero","inputs":[]},{"type":"error","name":"InvalidSignature","inputs":[]},{"type":"error","name":"NotActivelyDelegated","inputs":[]},{"type":"error","name":"OnlyAllocationManager","inputs":[]},{"type":"error","name":"OnlyEigenPodManager","inputs":[]},{"type":"error","name":"OnlyStrategyManagerOrEigenPodManager","inputs":[]},{"type":"error","name":"OperatorNotRegistered","inputs":[]},{"type":"error","name":"OperatorsCannotUndelegate","inputs":[]},{"type":"error","name":"SaltSpent","inputs":[]},{"type":"error","name":"SignatureExpired","inputs":[]},{"type":"error","name":"WithdrawalDelayNotElapsed","inputs":[]},{"type":"error","name":"WithdrawalNotQueued","inputs":[]},{"type":"error","name":"WithdrawerNotCaller","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"DELEGATION_APPROVAL_TYPEHASH()":"04a4f979","allocationManager()":"ca8aa7c7","beaconChainETHStrategy()":"9104c319","calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)":"0b9f487a","calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))":"597b36da","completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)":"e4cc3f90","completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])":"9435bb43","convertToDepositShares(address,address[],uint256[])":"25df922e","cumulativeWithdrawalsQueued(address)":"a1788484","decreaseDelegatedShares(address,uint256,uint64)":"60a0d1ce","delegateTo(address,(bytes,uint256),bytes32)":"eea9064b","delegatedTo(address)":"65da1264","delegationApprover(address)":"3cdeb5e0","delegationApproverSaltIsSpent(address,bytes32)":"bb45fef2","depositScalingFactor(address,address)":"bfae3fd2","domainSeparator()":"f698da25","eigenPodManager()":"4665bcda","getDepositedShares(address)":"66d5ba93","getOperatorShares(address,address[])":"90041347","getOperatorsShares(address[],address[])":"f0e0e676","getQueuedWithdrawal(bytes32)":"5d975e88","getQueuedWithdrawalRoots(address)":"fd8aa88d","getQueuedWithdrawals(address)":"5dd68579","getSlashableSharesInQueue(address,address)":"6e174448","getWithdrawableShares(address,address[])":"c978f7ac","increaseDelegatedShares(address,address,uint256,uint256)":"3c651cf2","initialize(address,uint256)":"cd6dc687","isDelegated(address)":"3e28391d","isOperator(address)":"6d70f7ae","minWithdrawalDelayBlocks()":"c448feb8","modifyOperatorDetails(address,address)":"54b7c96c","operatorShares(address,address)":"778e55f3","pendingWithdrawals(bytes32)":"b7f06ebe","queueWithdrawals((address[],uint256[],address)[])":"0dd8dd02","redelegate(address,(bytes,uint256),bytes32)":"a33a3433","registerAsOperator(address,uint32,string)":"2aa6d888","slashOperatorShares(address,address,uint64,uint64)":"601bb36f","strategyManager()":"39b70e38","undelegate(address)":"da8be864","updateOperatorMetadataURI(address,string)":"78296ec5","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ActivelyDelegated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerCannotUndelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FullySlashed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputArrayLengthZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotActivelyDelegated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAllocationManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyEigenPodManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyStrategyManagerOrEigenPodManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorsCannotUndelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SaltSpent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalDelayNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalNotQueued\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawerNotCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDelegationApprover\",\"type\":\"address\"}],\"name\":\"DelegationApproverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositScalingFactor\",\"type\":\"uint256\"}],\"name\":\"DepositScalingFactorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"OperatorMetadataURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"}],\"name\":\"OperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSlashedShares\",\"type\":\"uint256\"}],\"name\":\"OperatorSharesSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"SlashingWithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct IDelegationManagerTypes.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sharesToWithdraw\",\"type\":\"uint256[]\"}],\"name\":\"SlashingWithdrawalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerDelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerForceUndelegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"StakerUndelegated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_APPROVAL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocationManager\",\"outputs\":[{\"internalType\":\"contract IAllocationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainETHStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegationApprover\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"calculateDelegationApprovalDigestHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManagerTypes.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"}],\"name\":\"calculateWithdrawalRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManagerTypes.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"receiveAsTokens\",\"type\":\"bool\"}],\"name\":\"completeQueuedWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManagerTypes.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IERC20[][]\",\"name\":\"tokens\",\"type\":\"address[][]\"},{\"internalType\":\"bool[]\",\"name\":\"receiveAsTokens\",\"type\":\"bool[]\"}],\"name\":\"completeQueuedWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawableShares\",\"type\":\"uint256[]\"}],\"name\":\"convertToDepositShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"cumulativeWithdrawalsQueued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalQueued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curDepositShares\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"beaconChainSlashingFactorDecrease\",\"type\":\"uint64\"}],\"name\":\"decreaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtilsMixinTypes.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"delegatedTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"delegationApprover\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegationApprover\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"delegationApproverSaltIsSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"spent\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"depositScalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodManager\",\"outputs\":[{\"internalType\":\"contract IEigenPodManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getDepositedShares\",\"outputs\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getOperatorShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"operators\",\"type\":\"address[]\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getOperatorsShares\",\"outputs\":[{\"internalType\":\"uint256[][]\",\"name\":\"\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"getQueuedWithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManagerTypes.Withdrawal\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getQueuedWithdrawalRoots\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"getQueuedWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"scaledShares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IDelegationManagerTypes.Withdrawal[]\",\"name\":\"withdrawals\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"shares\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getSlashableSharesInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"}],\"name\":\"getWithdrawableShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"withdrawableShares\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositShares\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevDepositShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addedShares\",\"type\":\"uint256\"}],\"name\":\"increaseDelegatedShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialPausedStatus\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"isDelegated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawalDelayBlocks\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newDelegationApprover\",\"type\":\"address\"}],\"name\":\"modifyOperatorDetails\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"operatorShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositShares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"__deprecated_withdrawer\",\"type\":\"address\"}],\"internalType\":\"struct IDelegationManagerTypes.QueuedWithdrawalParams[]\",\"name\":\"params\",\"type\":\"tuple[]\"}],\"name\":\"queueWithdrawals\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtilsMixinTypes.SignatureWithExpiry\",\"name\":\"newOperatorApproverSig\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"redelegate\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"withdrawalRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initDelegationApprover\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"allocationDelay\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"registerAsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"prevMaxMagnitude\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newMaxMagnitude\",\"type\":\"uint64\"}],\"name\":\"slashOperatorShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"undelegate\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"withdrawalRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"updateOperatorMetadataURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"errors\":{\"ActivelyDelegated()\":[{\"details\":\"Thrown when an account is actively delegated.\"}],\"CallerCannotUndelegate()\":[{\"details\":\"Thrown when caller cannot undelegate on behalf of a staker.\"}],\"FullySlashed()\":[{\"details\":\"Thrown when an operator has been fully slashed(maxMagnitude is 0) for a strategy. or if the staker has had been natively slashed to the point of their beaconChainScalingFactor equalling 0.\"}],\"InputArrayLengthMismatch()\":[{\"details\":\"Thrown when two array parameters have mismatching lengths.\"}],\"InputArrayLengthZero()\":[{\"details\":\"Thrown when input arrays length is zero.\"}],\"NotActivelyDelegated()\":[{\"details\":\"Thrown when an account is not actively delegated.\"}],\"OnlyAllocationManager()\":[{\"details\":\"Throw when msg.sender is not the AllocationManager\"}],\"OnlyEigenPodManager()\":[{\"details\":\"Thrown when msg.sender is not the EigenPodManager\"}],\"OnlyStrategyManagerOrEigenPodManager()\":[{\"details\":\"Thrown when caller is neither the StrategyManager or EigenPodManager contract.\"}],\"OperatorNotRegistered()\":[{\"details\":\"Thrown when `operator` is not a registered operator.\"}],\"OperatorsCannotUndelegate()\":[{\"details\":\"Thrown when an operator attempts to undelegate.\"}],\"SaltSpent()\":[{\"details\":\"Thrown when attempting to spend a spent eip-712 salt.\"}],\"WithdrawalDelayNotElapsed()\":[{\"details\":\"Thrown when attempting to withdraw before delay has elapsed.\"}],\"WithdrawalNotQueued()\":[{\"details\":\"Thrown when attempting to execute an action that was not queued.\"}],\"WithdrawerNotCaller()\":[{\"details\":\"Thrown when withdrawer is not the current caller.\"}]},\"events\":{\"OperatorMetadataURIUpdated(address,string)\":{\"details\":\"Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\"},\"SlashingWithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]),uint256[])\":{\"params\":{\"sharesToWithdraw\":\"Is an array of the expected shares that were queued for withdrawal corresponding to the strategies in the `withdrawal`.\",\"withdrawal\":\"Is the withdrawal itself.\",\"withdrawalRoot\":\"Is the hash of the `withdrawal`.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"params\":{\"_delegationApprover\":\"the operator's `delegationApprover` who will be signing the delegationHash (in general)\",\"approverSalt\":\"A unique and single use value associated with the approver signature.\",\"expiry\":\"Time after which the approver's signature becomes invalid\",\"operator\":\"The account receiving delegated stake\",\"staker\":\"The account delegating their stake\"}},\"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)\":{\"params\":{\"receiveAsTokens\":\"If true, withdrawn shares will be converted to tokens and sent to the caller. If false, the caller receives shares that can be delegated to an operator. NOTE: if the caller receives shares and is currently delegated to an operator, the received shares are automatically delegated to the caller's current operator.\",\"tokens\":\"For each `withdrawal.strategies`, the underlying token of the strategy NOTE: if `receiveAsTokens` is false, the `tokens` array is unused and can be filled with default values. However, `tokens.length` MUST still be equal to `withdrawal.strategies.length`. NOTE: For the `beaconChainETHStrategy`, the corresponding `tokens` value is ignored (can be 0).\",\"withdrawal\":\"The withdrawal to complete\"}},\"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])\":{\"details\":\"See `completeQueuedWithdrawal` for relevant dev tags\",\"params\":{\"receiveAsTokens\":\"Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\",\"tokens\":\"Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\",\"withdrawals\":\"Array of Withdrawals to complete. See `completeQueuedWithdrawal` for the usage of a single Withdrawal.\"}},\"convertToDepositShares(address,address[],uint256[])\":{\"details\":\"will be a few wei off due to rounding errors\",\"params\":{\"staker\":\"the staker to convert shares for\",\"strategies\":\"the strategies to convert shares for\",\"withdrawableShares\":\"the shares to convert\"},\"returns\":{\"_0\":\"the deposit shares\"}},\"decreaseDelegatedShares(address,uint256,uint64)\":{\"details\":\"Note: `beaconChainSlashingFactorDecrease` are assumed to ALWAYS be < 1 WAD. These invariants are maintained in the EigenPodManager.\",\"params\":{\"beaconChainSlashingFactorDecrease\":\"the amount that the staker's beaconChainSlashingFactor has decreased by\",\"curDepositShares\":\"the current deposit shares held by the staker\",\"staker\":\"the staker whose operator's balance will be decreased\"}},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"details\":\"The signature/salt are used ONLY if the operator has configured a delegationApprover. If they have not, these params can be left empty.\",\"params\":{\"approverSalt\":\"(optional) A unique single use value tied to an individual signature.\",\"approverSignatureAndExpiry\":\"(optional) Verifies the operator approves of this delegation\",\"operator\":\"The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\"}},\"domainSeparator()\":{\"details\":\"The domain separator is computed according to EIP-712 specification, using:      - The hardcoded name \\\"EigenLayer\\\"      - The contract's version string      - The current chain ID      - This contract's addressSee https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.\",\"returns\":{\"_0\":\"The 32-byte domain separator hash used in EIP-712 structured data signing.\"}},\"getOperatorShares(address,address[])\":{\"params\":{\"operator\":\"the operator to get shares for\",\"strategies\":\"the strategies to get shares for\"}},\"getOperatorsShares(address[],address[])\":{\"params\":{\"operators\":\"the operators to get shares for\",\"strategies\":\"the strategies to get shares for\"}},\"getQueuedWithdrawal(bytes32)\":{\"details\":\"The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are appliedWithdrawals queued before the slashing release cannot be queried with this method\",\"params\":{\"withdrawalRoot\":\"The hash identifying the queued withdrawal\"},\"returns\":{\"shares\":\"Array of shares corresponding to each strategy in the withdrawal\",\"withdrawal\":\"The withdrawal details\"}},\"getQueuedWithdrawals(address)\":{\"details\":\"The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are applied.\",\"params\":{\"staker\":\"The address of the staker to query withdrawals for.\"},\"returns\":{\"shares\":\"2D array of shares, where each inner array corresponds to the strategies in the withdrawal.\",\"withdrawals\":\"Array of Withdrawal structs containing details about each queued withdrawal.\"}},\"getSlashableSharesInQueue(address,address)\":{\"params\":{\"operator\":\"the operator to get shares for\",\"strategy\":\"the strategy to get shares for\"},\"returns\":{\"_0\":\"the amount of shares that are slashable in the withdrawal queue for an operator and a strategy\"}},\"increaseDelegatedShares(address,address,uint256,uint256)\":{\"details\":\"Note that if the either the staker's current operator has been slashed 100% for `strategy`, OR the staker has been slashed 100% on the beacon chain such that the calculated slashing factor is 0, this method WILL REVERT.\",\"params\":{\"addedShares\":\"The number of deposit shares added by the staker\",\"prevDepositShares\":\"The number of deposit shares the staker had in the strategy prior to the increase\",\"staker\":\"The address whose deposit shares have increased\",\"strategy\":\"The strategy in which shares have been deposited\"}},\"initialize(address,uint256)\":{\"details\":\"Initializes the initial owner and paused status.\"},\"minWithdrawalDelayBlocks()\":{\"details\":\"Backwards-compatible interface to return the internal `MIN_WITHDRAWAL_DELAY_BLOCKS` valuePrevious value in storage was deprecated. See `__deprecated_minWithdrawalDelayBlocks`\"},\"modifyOperatorDetails(address,address)\":{\"details\":\"The caller must have previously registered as an operator in EigenLayer.\",\"params\":{\"newDelegationApprover\":\"is the new delegationApprover for the operator\",\"operator\":\"is the operator to update the delegationApprover for\"}},\"queueWithdrawals((address[],uint256[],address)[])\":{\"details\":\"To view all the staker's strategies/deposit shares that can be queued for withdrawal, see `getDepositedShares`To view the current conversion between a staker's deposit shares and withdrawable shares, see `getWithdrawableShares`\"},\"redelegate(address,(bytes,uint256),bytes32)\":{\"details\":\"This method acts like a call to `undelegate`, then `delegateTo`NOTE: the following 2 params are ONLY checked if `newOperator` has a `delegationApprover`. If not, they can be left empty.\",\"params\":{\"approverSalt\":\"A unique single use value tied to the approver's signature\",\"newOperator\":\"the new operator that will be delegated all assets\",\"newOperatorApproverSig\":\"A signature from the operator's `delegationApprover`\"}},\"registerAsOperator(address,uint32,string)\":{\"details\":\"Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".This function will revert if the caller is already delegated to an operator.Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\",\"params\":{\"allocationDelay\":\"The delay before allocations take effect.\",\"initDelegationApprover\":\"is an address that, if set, must provide a signature when stakers delegate to an operator.\",\"metadataURI\":\"is a URI for the operator's metadata, i.e. a link providing more details on the operator.\"}},\"slashOperatorShares(address,address,uint64,uint64)\":{\"details\":\"Callable only by the AllocationManagerNote: Assumes `prevMaxMagnitude <= newMaxMagnitude`. This invariant is maintained in the AllocationManager.\",\"params\":{\"newMaxMagnitude\":\"the new maxMagnitude of the operator\",\"operator\":\"The operator to decrease shares for\",\"prevMaxMagnitude\":\"the previous maxMagnitude of the operator\",\"strategy\":\"The strategy to decrease shares for\"}},\"undelegate(address)\":{\"details\":\"Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"Reverts if the `staker` is not delegated to an operator\",\"params\":{\"staker\":\"The account to be undelegated\"},\"returns\":{\"withdrawalRoots\":\"The roots of the newly queued withdrawals, if a withdrawal was queued. Returns an empty array if none was queued.\"}},\"updateOperatorMetadataURI(address,string)\":{\"details\":\"Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\",\"params\":{\"metadataURI\":\"The URI for metadata associated with an operator\",\"operator\":\"The operator to update metadata for\"}},\"version()\":{\"returns\":{\"_0\":\"The version string in SemVer format (e.g., \\\"v1.1.1\\\")\"}}},\"stateVariables\":{\"PAUSED_ENTER_WITHDRAWAL_QUEUE\":{\"details\":\"Index for flag that pauses queuing new withdrawals when set.\"},\"PAUSED_EXIT_WITHDRAWAL_QUEUE\":{\"details\":\"Index for flag that pauses completing existing withdrawals when set.\"},\"PAUSED_NEW_DELEGATION\":{\"details\":\"Index for flag that pauses new delegations when set\"},\"__deprecated_DOMAIN_SEPARATOR\":{\"details\":\"Do not remove, deprecated storage.\"},\"__deprecated_minWithdrawalDelayBlocks\":{\"details\":\"Do not remove, deprecated storage.\"},\"__deprecated_stakeRegistry\":{\"details\":\"Do not remove, deprecated storage. See conversation here: https://github.com/Layr-Labs/eigenlayer-contracts/pull/365/files#r1417525270\"},\"__deprecated_strategyWithdrawalDelayBlocks\":{\"details\":\"Do not remove, deprecated storage.\"},\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"_cumulativeScaledSharesHistory\":{\"details\":\"Stores scaledShares instead of total withdrawn shares to track current slashable shares, dependent on the maxMagnitude\"},\"_queuedWithdrawals\":{\"details\":\"This variable only reflects withdrawals that were made after the slashing release.\"},\"_stakerQueuedWithdrawalRoots\":{\"details\":\"Entries are removed when the withdrawal is completed.This variable only reflects withdrawals that were made after the slashing release.\"},\"cumulativeWithdrawalsQueued\":{\"details\":\"This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\"},\"operatorShares\":{\"details\":\"The following invariant should hold for each `strategy`: operatorShares[operator] = sum(withdrawable shares of all stakers delegated to operator)\"},\"pendingWithdrawals\":{\"details\":\"Returns whether a withdrawal is pending for a given `withdrawalRoot`.This variable will be deprecated in the future, values should only be read or deleted.\"}},\"title\":\"Storage variables for the `DelegationManager` contract.\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidSignature()\":[{\"notice\":\"Thrown when a signature is invalid.\"}],\"SignatureExpired()\":[{\"notice\":\"Thrown when a signature has expired.\"}]},\"events\":{\"DelegationApproverUpdated(address,address)\":{\"notice\":\"Emitted when an operator updates their delegation approver\"},\"DepositScalingFactorUpdated(address,address,uint256)\":{\"notice\":\"Emitted when a staker's depositScalingFactor is updated\"},\"OperatorMetadataURIUpdated(address,string)\":{\"notice\":\"Emitted when @param operator indicates that they are updating their MetadataURI string\"},\"OperatorSharesDecreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\"},\"OperatorSharesIncreased(address,address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\"},\"OperatorSharesSlashed(address,address,uint256)\":{\"notice\":\"Emitted whenever an operator's shares are slashed for a given strategy\"},\"SlashingWithdrawalCompleted(bytes32)\":{\"notice\":\"Emitted when a queued withdrawal is completed\"},\"SlashingWithdrawalQueued(bytes32,(address,address,address,uint256,uint32,address[],uint256[]),uint256[])\":{\"notice\":\"Emitted when a new withdrawal is queued.\"},\"StakerDelegated(address,address)\":{\"notice\":\"Emitted when @param staker delegates to @param operator.\"},\"StakerForceUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker is undelegated via a call not originating from the staker themself\"},\"StakerUndelegated(address,address)\":{\"notice\":\"Emitted when @param staker undelegates from @param operator.\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_APPROVAL_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the `DelegationApproval` struct used by the contract\"},\"allocationManager()\":{\"notice\":\"The AllocationManager contract for EigenLayer\"},\"beaconChainETHStrategy()\":{\"notice\":\"Canonical, virtual beacon chain ETH strategy\"},\"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)\":{\"notice\":\"Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` function.\"},\"calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))\":{\"notice\":\"Returns the keccak256 hash of `withdrawal`.\"},\"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)\":{\"notice\":\"Used to complete a queued withdrawal\"},\"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])\":{\"notice\":\"Used to complete multiple queued withdrawals\"},\"convertToDepositShares(address,address[],uint256[])\":{\"notice\":\"Converts shares for a set of strategies to deposit shares, likely in order to input into `queueWithdrawals`. This function will revert from a division by 0 error if any of the staker's strategies have a slashing factor of 0.\"},\"cumulativeWithdrawalsQueued(address)\":{\"notice\":\"Returns the total number of withdrawals that have been queued for a given `staker`.\"},\"decreaseDelegatedShares(address,uint256,uint64)\":{\"notice\":\"If the staker is delegated, decreases its operator's shares in response to a decrease in balance in the beaconChainETHStrategy\"},\"delegateTo(address,(bytes,uint256),bytes32)\":{\"notice\":\"Caller delegates their stake to an operator.\"},\"delegatedTo(address)\":{\"notice\":\"Returns the `operator` a `staker` is delegated to, or address(0) if not delegated. Note: operators are delegated to themselves\"},\"delegationApprover(address)\":{\"notice\":\"Returns the delegationApprover account for an operator\"},\"delegationApproverSaltIsSpent(address,bytes32)\":{\"notice\":\"Returns whether `delegationApprover` has already used the given `salt`.\"},\"depositScalingFactor(address,address)\":{\"notice\":\"Returns the scaling factor applied to a staker's deposits for a given strategy\"},\"domainSeparator()\":{\"notice\":\"Computes the EIP-712 domain separator used for signature validation.\"},\"eigenPodManager()\":{\"notice\":\"The EigenPodManager contract for EigenLayer\"},\"getDepositedShares(address)\":{\"notice\":\"Returns the number of shares in storage for a staker and all their strategies\"},\"getOperatorShares(address,address[])\":{\"notice\":\"Returns the shares that an operator has delegated to them in a set of strategies\"},\"getOperatorsShares(address[],address[])\":{\"notice\":\"Returns the shares that a set of operators have delegated to them in a set of strategies\"},\"getQueuedWithdrawal(bytes32)\":{\"notice\":\"Returns the Withdrawal and corresponding shares associated with a `withdrawalRoot`\"},\"getQueuedWithdrawalRoots(address)\":{\"notice\":\"Returns a list of queued withdrawal roots for the `staker`. NOTE that this only returns withdrawals queued AFTER the slashing release.\"},\"getQueuedWithdrawals(address)\":{\"notice\":\"Returns all queued withdrawals and their corresponding shares for a staker.\"},\"getSlashableSharesInQueue(address,address)\":{\"notice\":\"Returns amount of withdrawable shares from an operator for a strategy that is still in the queue and therefore slashable. Note that the *actual* slashable amount could be less than this value as this doesn't account for amounts that have already been slashed. This assumes that none of the shares have been slashed.\"},\"getWithdrawableShares(address,address[])\":{\"notice\":\"Given a staker and a set of strategies, return the shares they can queue for withdrawal and the corresponding depositShares. This value depends on which operator the staker is delegated to. The shares amount returned is the actual amount of Strategy shares the staker would receive (subject to each strategy's underlying shares to token ratio).\"},\"increaseDelegatedShares(address,address,uint256,uint256)\":{\"notice\":\"Called by a share manager when a staker's deposit share balance in a strategy increases. This method delegates any new shares to an operator (if applicable), and updates the staker's deposit scaling factor regardless.\"},\"isDelegated(address)\":{\"notice\":\"Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\"},\"isOperator(address)\":{\"notice\":\"Returns true is an operator has previously registered for delegation.\"},\"minWithdrawalDelayBlocks()\":{\"notice\":\"Returns the minimum withdrawal delay in blocks to pass for withdrawals queued to be completable. Also applies to legacy withdrawals so any withdrawals not completed prior to the slashing upgrade will be subject to this longer delay.\"},\"modifyOperatorDetails(address,address)\":{\"notice\":\"Updates an operator's stored `delegationApprover`.\"},\"operatorShares(address,address)\":{\"notice\":\"Tracks the current balance of shares an `operator` is delegated according to each `strategy`. Updated by both the `StrategyManager` and `EigenPodManager` when a staker's delegatable balance changes, and by the `AllocationManager` when the `operator` is slashed.\"},\"queueWithdrawals((address[],uint256[],address)[])\":{\"notice\":\"Allows a staker to queue a withdrawal of their deposit shares. The withdrawal can be completed after the MIN_WITHDRAWAL_DELAY_BLOCKS via either of the completeQueuedWithdrawal methods. While in the queue, these shares are removed from the staker's balance, as well as from their operator's delegated share balance (if applicable). Note that while in the queue, deposit shares are still subject to slashing. If any slashing has occurred, the shares received may be less than the queued deposit shares.\"},\"redelegate(address,(bytes,uint256),bytes32)\":{\"notice\":\"Undelegates the staker from their current operator, and redelegates to `newOperator` Queues a withdrawal for all of the staker's withdrawable shares. These shares will only be delegated to `newOperator` AFTER the withdrawal is completed.\"},\"registerAsOperator(address,uint32,string)\":{\"notice\":\"Registers the caller as an operator in EigenLayer.\"},\"slashOperatorShares(address,address,uint64,uint64)\":{\"notice\":\"Decreases the operators shares in storage after a slash and increases the burnable shares by calling into either the StrategyManager or EigenPodManager (if the strategy is beaconChainETH).\"},\"strategyManager()\":{\"notice\":\"The StrategyManager contract for EigenLayer\"},\"undelegate(address)\":{\"notice\":\"Undelegates the staker from their operator and queues a withdrawal for all of their shares\"},\"updateOperatorMetadataURI(address,string)\":{\"notice\":\"Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\"},\"version()\":{\"notice\":\"Returns the semantic version string of the contract.\"}},\"notice\":\"Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-serviceThis storage contract is separate from the logic to simplify the upgrade process.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/core/DelegationManagerStorage.sol\":\"DelegationManagerStorage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\",\":zeus-templates/=lib/zeus-templates/src/\"]},\"sources\":{\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/MathUpgradeable.sol\":{\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91\",\"dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB\"]},\"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/SafeCastUpgradeable.sol\":{\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c\",\"dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis\"]},\"lib/openzeppelin-contracts-v4.9.0/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"lib/openzeppelin-contracts-v4.9.0/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/openzeppelin-contracts-v4.9.0/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://20bf19b2b851f58a4c24543de80ae70b3e08621f9230eb335dc75e2d4f43f5df\",\"dweb:/ipfs/QmSYuH1AhvJkPK8hNvoPqtExBcgTB42pPRHgTHkS5c5zYW\"]},\"src/contracts/core/DelegationManagerStorage.sol\":{\"keccak256\":\"0x70c3dbbf282eec1756f2da9f780ca9fa7db60c1cf317e57f873bdb20e42be1f9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://69618b02f1e499d3c59614fb2560d445cfa563069738d884e3086681e0c24505\",\"dweb:/ipfs/QmRcD8rDpSG7pR9VmToZtkXnFfJemrwnGaMiaTkW6YVgfY\"]},\"src/contracts/interfaces/IAVSRegistrar.sol\":{\"keccak256\":\"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc\",\"dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm\"]},\"src/contracts/interfaces/IAllocationManager.sol\":{\"keccak256\":\"0x9f95d00bc0a22ec850e5cc6bcda9db2485f87b627232f9360571dbe87a0ee035\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://96d1e4f044b7337f83f970202b5ce5154970bb8745646b5c0e51cab58713c811\",\"dweb:/ipfs/QmX7mkfacMVKKXJB5GixQqtfYJ3jCkQzTRu4eUy4RjBNeM\"]},\"src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0xd8a2913e40e1cb3e97eb3ddabd26dab72854de8b47c0fd438808b5bd2be2ca20\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://26d520cecf61b994a11ad8a009570e71736daeb3f73e1983d2f85ff6a725ab82\",\"dweb:/ipfs/QmWjQbNJJaW1H3e3GYcoATfoSjYMoZcjjrc7eA3nHDWYDf\"]},\"src/contracts/interfaces/IETHPOSDeposit.sol\":{\"keccak256\":\"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91\",\"dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz\"]},\"src/contracts/interfaces/IEigenPod.sol\":{\"keccak256\":\"0x3d4118c7aa962ea8cfe15fd8b1b0ee160421506e036d96a8b09c9cc957fff31c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://51e444895bea318e1c0f6d8d5b092330d0c42b52a95e1935d868e599abd1795e\",\"dweb:/ipfs/Qmd8ozg2SXqSM72ddFmSZm5yqKMcaxQ31ifAhqWrUazWwj\"]},\"src/contracts/interfaces/IEigenPodManager.sol\":{\"keccak256\":\"0xa2e18dbfd63c3211158f916b669bd74066388564a2f019e952953bc5390e1466\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c86e9d4426aa20892ffc660793e8ce6e881de02cc6a0b483efaa06f14a7df864\",\"dweb:/ipfs/QmQbvkto6g9EeRMfU4bPcuAh1Tz3ohGFpHyHS8GA8mZiFN\"]},\"src/contracts/interfaces/IPausable.sol\":{\"keccak256\":\"0x0404f1db44005929899e00dcc50d553175951ff26c215c87215bbd92b4ebfde3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cdb88bff60663f3418d271c7db93c2867d767e31ec592690e7b2e1f1ba1589e8\",\"dweb:/ipfs/QmQfsZCiEqWYEFopZB5LvL9pq47Qba9EeMzeZcHN2e9ypc\"]},\"src/contracts/interfaces/IPauserRegistry.sol\":{\"keccak256\":\"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72\",\"dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD\"]},\"src/contracts/interfaces/ISemVerMixin.sol\":{\"keccak256\":\"0xcb910d9afbaf14c2ec32828e28ca72f1dba35c7371f487505d2a73da2c576009\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://d801fbeeb84ce1dde84dcfa85d519b726f8ba928c76dc4b24d9317299a7a1ab0\",\"dweb:/ipfs/QmfAVYxxJry6GTML7jtQfoR4H1ZFpF6XYSpFZHZ8QTC61B\"]},\"src/contracts/interfaces/IShareManager.sol\":{\"keccak256\":\"0xa331e73e99af7eb38befbd7e1d1024d7d9b2c6cc2534313672d1f937ee9fdaaa\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://77fada64905d51779609546ba527834aff7d4478ff26df6f33abfe4a57ba028c\",\"dweb:/ipfs/QmerLh58EpALrjvbgdVAbXJz9uCHukBKyS1MeVsEPo1ytS\"]},\"src/contracts/interfaces/ISignatureUtilsMixin.sol\":{\"keccak256\":\"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10\",\"dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE\"]},\"src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xbf084857bc21f2e3752072df667a3025ba73431eaa56852562b0dc3594361d75\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://8a5eb881299b8949063e8d7eecdadbae92f3c84a129aa58b2e5f995714fb3b23\",\"dweb:/ipfs/QmRsG6BgSS3UcXMDjjucKaNvzGjHa85ph22atnz6hzW9xo\"]},\"src/contracts/interfaces/IStrategyManager.sol\":{\"keccak256\":\"0x9989483e1c623b3d62b3fe28ca6255577552d85f8ab916fd35559bbad6898a2f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://97084919a9b4c2e30cd1c529c7c21b6274d3ebf2e52e29e612709f6ea8a8ee8f\",\"dweb:/ipfs/QmbdvS23Qe3RLuzPmFndHzmRdnRWtPYiwEBLKwWdUeYkiF\"]},\"src/contracts/libraries/BeaconChainProofs.sol\":{\"keccak256\":\"0xff027b027df59b9d66f69951ff7a52f77ea3a30cda6c8f9b80f02680925484db\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0660cd206c833fdbd84837479e77e69bd29afa34707ed5819604c8d37d9aa828\",\"dweb:/ipfs/QmcUxK7pNDL4ZN2r913fG446hF8snEEVzWJZisedd2zxGc\"]},\"src/contracts/libraries/Endian.sol\":{\"keccak256\":\"0xe8ec0e6bef36311170e2447bdd2fe8b19aad7244024926243428ffe02754b136\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://a628118c581ef8393ff09e50d0db45470bed040c45ed463f71144ef344fee48e\",\"dweb:/ipfs/QmUz7nTJfzXKL2Sy175LPHNeUfKFHGarWvJFeCG4ZBqRuX\"]},\"src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0xf6ef9925d5a6db7de81efac1e85b2a4ec64249abc13d4a2ff3ff73e41c8df436\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d3e5dc3ef9a117ac18ac2c0371d34b948d3e1e93c0eba6dbb7a75a1e15abfc6\",\"dweb:/ipfs/QmT4PrXoTJpnTNUxvXk3r4tzrfzSUYg4Lr2GyWNWeVXhAk\"]},\"src/contracts/libraries/OperatorSetLib.sol\":{\"keccak256\":\"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41\",\"dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx\"]},\"src/contracts/libraries/SlashingLib.sol\":{\"keccak256\":\"0xe73a53cfd201425b8230c1a9ba91ea7b12315828715c93216d3c9de0d64e0e04\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://615749ec37dc7311a76f51519892e3f4a8c56a90d6f7283d8eec79628385b071\",\"dweb:/ipfs/QmdGVLsmXASwLVVNK9uyHpuN816M7YFqEP4TWCUVu1HXLG\"]},\"src/contracts/libraries/Snapshots.sol\":{\"keccak256\":\"0x27e0e9ed30a530ebeb197254d4a7e5a47bfcb1fc2863d0033f853a997dd231c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f0627df417303e2cdae3df24026798bda09926846dba07e5228893559684e8b\",\"dweb:/ipfs/QmboVLG81jcuXYjr2aygnQM2aPUiT6jQkHWMajftoxaMZY\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ActivelyDelegated"},{"inputs":[],"type":"error","name":"CallerCannotUndelegate"},{"inputs":[],"type":"error","name":"FullySlashed"},{"inputs":[],"type":"error","name":"InputArrayLengthMismatch"},{"inputs":[],"type":"error","name":"InputArrayLengthZero"},{"inputs":[],"type":"error","name":"InvalidSignature"},{"inputs":[],"type":"error","name":"NotActivelyDelegated"},{"inputs":[],"type":"error","name":"OnlyAllocationManager"},{"inputs":[],"type":"error","name":"OnlyEigenPodManager"},{"inputs":[],"type":"error","name":"OnlyStrategyManagerOrEigenPodManager"},{"inputs":[],"type":"error","name":"OperatorNotRegistered"},{"inputs":[],"type":"error","name":"OperatorsCannotUndelegate"},{"inputs":[],"type":"error","name":"SaltSpent"},{"inputs":[],"type":"error","name":"SignatureExpired"},{"inputs":[],"type":"error","name":"WithdrawalDelayNotElapsed"},{"inputs":[],"type":"error","name":"WithdrawalNotQueued"},{"inputs":[],"type":"error","name":"WithdrawerNotCaller"},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"newDelegationApprover","type":"address","indexed":false}],"type":"event","name":"DelegationApproverUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":false},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false},{"internalType":"uint256","name":"newDepositScalingFactor","type":"uint256","indexed":false}],"type":"event","name":"DepositScalingFactorUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"string","name":"metadataURI","type":"string","indexed":false}],"type":"event","name":"OperatorMetadataURIUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"delegationApprover","type":"address","indexed":false}],"type":"event","name":"OperatorRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"staker","type":"address","indexed":false},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false},{"internalType":"uint256","name":"shares","type":"uint256","indexed":false}],"type":"event","name":"OperatorSharesDecreased","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"staker","type":"address","indexed":false},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false},{"internalType":"uint256","name":"shares","type":"uint256","indexed":false}],"type":"event","name":"OperatorSharesIncreased","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"contract IStrategy","name":"strategy","type":"address","indexed":false},{"internalType":"uint256","name":"totalSlashedShares","type":"uint256","indexed":false}],"type":"event","name":"OperatorSharesSlashed","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32","indexed":false}],"type":"event","name":"SlashingWithdrawalCompleted","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32","indexed":false},{"internalType":"struct IDelegationManagerTypes.Withdrawal","name":"withdrawal","type":"tuple","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}],"indexed":false},{"internalType":"uint256[]","name":"sharesToWithdraw","type":"uint256[]","indexed":false}],"type":"event","name":"SlashingWithdrawalQueued","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true}],"type":"event","name":"StakerDelegated","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true}],"type":"event","name":"StakerForceUndelegated","anonymous":false},{"inputs":[{"internalType":"address","name":"staker","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true}],"type":"event","name":"StakerUndelegated","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"DELEGATION_APPROVAL_TYPEHASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"allocationManager","outputs":[{"internalType":"contract IAllocationManager","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"beaconChainETHStrategy","outputs":[{"internalType":"contract IStrategy","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"_delegationApprover","type":"address"},{"internalType":"bytes32","name":"approverSalt","type":"bytes32"},{"internalType":"uint256","name":"expiry","type":"uint256"}],"stateMutability":"view","type":"function","name":"calculateDelegationApprovalDigestHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"struct IDelegationManagerTypes.Withdrawal","name":"withdrawal","type":"tuple","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}]}],"stateMutability":"pure","type":"function","name":"calculateWithdrawalRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"struct IDelegationManagerTypes.Withdrawal","name":"withdrawal","type":"tuple","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}]},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"bool","name":"receiveAsTokens","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"completeQueuedWithdrawal"},{"inputs":[{"internalType":"struct IDelegationManagerTypes.Withdrawal[]","name":"withdrawals","type":"tuple[]","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}]},{"internalType":"contract IERC20[][]","name":"tokens","type":"address[][]"},{"internalType":"bool[]","name":"receiveAsTokens","type":"bool[]"}],"stateMutability":"nonpayable","type":"function","name":"completeQueuedWithdrawals"},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"withdrawableShares","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"convertToDepositShares","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"cumulativeWithdrawalsQueued","outputs":[{"internalType":"uint256","name":"totalQueued","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"uint256","name":"curDepositShares","type":"uint256"},{"internalType":"uint64","name":"beaconChainSlashingFactorDecrease","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"decreaseDelegatedShares"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"struct ISignatureUtilsMixinTypes.SignatureWithExpiry","name":"approverSignatureAndExpiry","type":"tuple","components":[{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"expiry","type":"uint256"}]},{"internalType":"bytes32","name":"approverSalt","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"delegateTo"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"delegatedTo","outputs":[{"internalType":"address","name":"operator","type":"address"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"delegationApprover","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"delegationApprover","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"}],"stateMutability":"view","type":"function","name":"delegationApproverSaltIsSpent","outputs":[{"internalType":"bool","name":"spent","type":"bool"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"}],"stateMutability":"view","type":"function","name":"depositScalingFactor","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"domainSeparator","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"eigenPodManager","outputs":[{"internalType":"contract IEigenPodManager","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"getDepositedShares","outputs":[{"internalType":"contract IStrategy[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"}],"stateMutability":"view","type":"function","name":"getOperatorShares","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address[]","name":"operators","type":"address[]"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"}],"stateMutability":"view","type":"function","name":"getOperatorsShares","outputs":[{"internalType":"uint256[][]","name":"","type":"uint256[][]"}]},{"inputs":[{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getQueuedWithdrawal","outputs":[{"internalType":"struct IDelegationManagerTypes.Withdrawal","name":"withdrawal","type":"tuple","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}]},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"getQueuedWithdrawalRoots","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"getQueuedWithdrawals","outputs":[{"internalType":"struct IDelegationManagerTypes.Withdrawal[]","name":"withdrawals","type":"tuple[]","components":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"address","name":"delegatedTo","type":"address"},{"internalType":"address","name":"withdrawer","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"uint32","name":"startBlock","type":"uint32"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"scaledShares","type":"uint256[]"}]},{"internalType":"uint256[][]","name":"shares","type":"uint256[][]"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"}],"stateMutability":"view","type":"function","name":"getSlashableSharesInQueue","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"}],"stateMutability":"view","type":"function","name":"getWithdrawableShares","outputs":[{"internalType":"uint256[]","name":"withdrawableShares","type":"uint256[]"},{"internalType":"uint256[]","name":"depositShares","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"prevDepositShares","type":"uint256"},{"internalType":"uint256","name":"addedShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"increaseDelegatedShares"},{"inputs":[{"internalType":"address","name":"initialOwner","type":"address"},{"internalType":"uint256","name":"initialPausedStatus","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"view","type":"function","name":"isDelegated","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isOperator","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"minWithdrawalDelayBlocks","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"newDelegationApprover","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"modifyOperatorDetails"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"}],"stateMutability":"view","type":"function","name":"operatorShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"withdrawalRoot","type":"bytes32"}],"stateMutability":"view","type":"function","name":"pendingWithdrawals","outputs":[{"internalType":"bool","name":"pending","type":"bool"}]},{"inputs":[{"internalType":"struct IDelegationManagerTypes.QueuedWithdrawalParams[]","name":"params","type":"tuple[]","components":[{"internalType":"contract IStrategy[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"depositShares","type":"uint256[]"},{"internalType":"address","name":"__deprecated_withdrawer","type":"address"}]}],"stateMutability":"nonpayable","type":"function","name":"queueWithdrawals","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}]},{"inputs":[{"internalType":"address","name":"newOperator","type":"address"},{"internalType":"struct ISignatureUtilsMixinTypes.SignatureWithExpiry","name":"newOperatorApproverSig","type":"tuple","components":[{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint256","name":"expiry","type":"uint256"}]},{"internalType":"bytes32","name":"approverSalt","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"redelegate","outputs":[{"internalType":"bytes32[]","name":"withdrawalRoots","type":"bytes32[]"}]},{"inputs":[{"internalType":"address","name":"initDelegationApprover","type":"address"},{"internalType":"uint32","name":"allocationDelay","type":"uint32"},{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"registerAsOperator"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"contract IStrategy","name":"strategy","type":"address"},{"internalType":"uint64","name":"prevMaxMagnitude","type":"uint64"},{"internalType":"uint64","name":"newMaxMagnitude","type":"uint64"}],"stateMutability":"nonpayable","type":"function","name":"slashOperatorShares"},{"inputs":[],"stateMutability":"view","type":"function","name":"strategyManager","outputs":[{"internalType":"contract IStrategyManager","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"undelegate","outputs":[{"internalType":"bytes32[]","name":"withdrawalRoots","type":"bytes32[]"}]},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"string","name":"metadataURI","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"updateOperatorMetadataURI"},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"string","name":"","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)":{"params":{"_delegationApprover":"the operator's `delegationApprover` who will be signing the delegationHash (in general)","approverSalt":"A unique and single use value associated with the approver signature.","expiry":"Time after which the approver's signature becomes invalid","operator":"The account receiving delegated stake","staker":"The account delegating their stake"}},"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)":{"params":{"receiveAsTokens":"If true, withdrawn shares will be converted to tokens and sent to the caller. If false, the caller receives shares that can be delegated to an operator. NOTE: if the caller receives shares and is currently delegated to an operator, the received shares are automatically delegated to the caller's current operator.","tokens":"For each `withdrawal.strategies`, the underlying token of the strategy NOTE: if `receiveAsTokens` is false, the `tokens` array is unused and can be filled with default values. However, `tokens.length` MUST still be equal to `withdrawal.strategies.length`. NOTE: For the `beaconChainETHStrategy`, the corresponding `tokens` value is ignored (can be 0).","withdrawal":"The withdrawal to complete"}},"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])":{"details":"See `completeQueuedWithdrawal` for relevant dev tags","params":{"receiveAsTokens":"Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.","tokens":"Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.","withdrawals":"Array of Withdrawals to complete. See `completeQueuedWithdrawal` for the usage of a single Withdrawal."}},"convertToDepositShares(address,address[],uint256[])":{"details":"will be a few wei off due to rounding errors","params":{"staker":"the staker to convert shares for","strategies":"the strategies to convert shares for","withdrawableShares":"the shares to convert"},"returns":{"_0":"the deposit shares"}},"decreaseDelegatedShares(address,uint256,uint64)":{"details":"Note: `beaconChainSlashingFactorDecrease` are assumed to ALWAYS be < 1 WAD. These invariants are maintained in the EigenPodManager.","params":{"beaconChainSlashingFactorDecrease":"the amount that the staker's beaconChainSlashingFactor has decreased by","curDepositShares":"the current deposit shares held by the staker","staker":"the staker whose operator's balance will be decreased"}},"delegateTo(address,(bytes,uint256),bytes32)":{"details":"The signature/salt are used ONLY if the operator has configured a delegationApprover. If they have not, these params can be left empty.","params":{"approverSalt":"(optional) A unique single use value tied to an individual signature.","approverSignatureAndExpiry":"(optional) Verifies the operator approves of this delegation","operator":"The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer."}},"domainSeparator()":{"details":"The domain separator is computed according to EIP-712 specification, using:      - The hardcoded name \"EigenLayer\"      - The contract's version string      - The current chain ID      - This contract's addressSee https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator.","returns":{"_0":"The 32-byte domain separator hash used in EIP-712 structured data signing."}},"getOperatorShares(address,address[])":{"params":{"operator":"the operator to get shares for","strategies":"the strategies to get shares for"}},"getOperatorsShares(address[],address[])":{"params":{"operators":"the operators to get shares for","strategies":"the strategies to get shares for"}},"getQueuedWithdrawal(bytes32)":{"details":"The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are appliedWithdrawals queued before the slashing release cannot be queried with this method","params":{"withdrawalRoot":"The hash identifying the queued withdrawal"},"returns":{"shares":"Array of shares corresponding to each strategy in the withdrawal","withdrawal":"The withdrawal details"}},"getQueuedWithdrawals(address)":{"details":"The shares are what a user would receive from completing a queued withdrawal, assuming all slashings are applied.","params":{"staker":"The address of the staker to query withdrawals for."},"returns":{"shares":"2D array of shares, where each inner array corresponds to the strategies in the withdrawal.","withdrawals":"Array of Withdrawal structs containing details about each queued withdrawal."}},"getSlashableSharesInQueue(address,address)":{"params":{"operator":"the operator to get shares for","strategy":"the strategy to get shares for"},"returns":{"_0":"the amount of shares that are slashable in the withdrawal queue for an operator and a strategy"}},"increaseDelegatedShares(address,address,uint256,uint256)":{"details":"Note that if the either the staker's current operator has been slashed 100% for `strategy`, OR the staker has been slashed 100% on the beacon chain such that the calculated slashing factor is 0, this method WILL REVERT.","params":{"addedShares":"The number of deposit shares added by the staker","prevDepositShares":"The number of deposit shares the staker had in the strategy prior to the increase","staker":"The address whose deposit shares have increased","strategy":"The strategy in which shares have been deposited"}},"initialize(address,uint256)":{"details":"Initializes the initial owner and paused status."},"minWithdrawalDelayBlocks()":{"details":"Backwards-compatible interface to return the internal `MIN_WITHDRAWAL_DELAY_BLOCKS` valuePrevious value in storage was deprecated. See `__deprecated_minWithdrawalDelayBlocks`"},"modifyOperatorDetails(address,address)":{"details":"The caller must have previously registered as an operator in EigenLayer.","params":{"newDelegationApprover":"is the new delegationApprover for the operator","operator":"is the operator to update the delegationApprover for"}},"queueWithdrawals((address[],uint256[],address)[])":{"details":"To view all the staker's strategies/deposit shares that can be queued for withdrawal, see `getDepositedShares`To view the current conversion between a staker's deposit shares and withdrawable shares, see `getWithdrawableShares`"},"redelegate(address,(bytes,uint256),bytes32)":{"details":"This method acts like a call to `undelegate`, then `delegateTo`NOTE: the following 2 params are ONLY checked if `newOperator` has a `delegationApprover`. If not, they can be left empty.","params":{"approverSalt":"A unique single use value tied to the approver's signature","newOperator":"the new operator that will be delegated all assets","newOperatorApproverSig":"A signature from the operator's `delegationApprover`"}},"registerAsOperator(address,uint32,string)":{"details":"Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \"delegated to themself\".This function will revert if the caller is already delegated to an operator.Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event","params":{"allocationDelay":"The delay before allocations take effect.","initDelegationApprover":"is an address that, if set, must provide a signature when stakers delegate to an operator.","metadataURI":"is a URI for the operator's metadata, i.e. a link providing more details on the operator."}},"slashOperatorShares(address,address,uint64,uint64)":{"details":"Callable only by the AllocationManagerNote: Assumes `prevMaxMagnitude <= newMaxMagnitude`. This invariant is maintained in the AllocationManager.","params":{"newMaxMagnitude":"the new maxMagnitude of the operator","operator":"The operator to decrease shares for","prevMaxMagnitude":"the previous maxMagnitude of the operator","strategy":"The strategy to decrease shares for"}},"undelegate(address)":{"details":"Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \"delegationApprover\"Reverts if the `staker` is not delegated to an operator","params":{"staker":"The account to be undelegated"},"returns":{"withdrawalRoots":"The roots of the newly queued withdrawals, if a withdrawal was queued. Returns an empty array if none was queued."}},"updateOperatorMetadataURI(address,string)":{"details":"Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event","params":{"metadataURI":"The URI for metadata associated with an operator","operator":"The operator to update metadata for"}},"version()":{"returns":{"_0":"The version string in SemVer format (e.g., \"v1.1.1\")"}}},"version":1},"userdoc":{"kind":"user","methods":{"DELEGATION_APPROVAL_TYPEHASH()":{"notice":"The EIP-712 typehash for the `DelegationApproval` struct used by the contract"},"allocationManager()":{"notice":"The AllocationManager contract for EigenLayer"},"beaconChainETHStrategy()":{"notice":"Canonical, virtual beacon chain ETH strategy"},"calculateDelegationApprovalDigestHash(address,address,address,bytes32,uint256)":{"notice":"Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` function."},"calculateWithdrawalRoot((address,address,address,uint256,uint32,address[],uint256[]))":{"notice":"Returns the keccak256 hash of `withdrawal`."},"completeQueuedWithdrawal((address,address,address,uint256,uint32,address[],uint256[]),address[],bool)":{"notice":"Used to complete a queued withdrawal"},"completeQueuedWithdrawals((address,address,address,uint256,uint32,address[],uint256[])[],address[][],bool[])":{"notice":"Used to complete multiple queued withdrawals"},"convertToDepositShares(address,address[],uint256[])":{"notice":"Converts shares for a set of strategies to deposit shares, likely in order to input into `queueWithdrawals`. This function will revert from a division by 0 error if any of the staker's strategies have a slashing factor of 0."},"cumulativeWithdrawalsQueued(address)":{"notice":"Returns the total number of withdrawals that have been queued for a given `staker`."},"decreaseDelegatedShares(address,uint256,uint64)":{"notice":"If the staker is delegated, decreases its operator's shares in response to a decrease in balance in the beaconChainETHStrategy"},"delegateTo(address,(bytes,uint256),bytes32)":{"notice":"Caller delegates their stake to an operator."},"delegatedTo(address)":{"notice":"Returns the `operator` a `staker` is delegated to, or address(0) if not delegated. Note: operators are delegated to themselves"},"delegationApprover(address)":{"notice":"Returns the delegationApprover account for an operator"},"delegationApproverSaltIsSpent(address,bytes32)":{"notice":"Returns whether `delegationApprover` has already used the given `salt`."},"depositScalingFactor(address,address)":{"notice":"Returns the scaling factor applied to a staker's deposits for a given strategy"},"domainSeparator()":{"notice":"Computes the EIP-712 domain separator used for signature validation."},"eigenPodManager()":{"notice":"The EigenPodManager contract for EigenLayer"},"getDepositedShares(address)":{"notice":"Returns the number of shares in storage for a staker and all their strategies"},"getOperatorShares(address,address[])":{"notice":"Returns the shares that an operator has delegated to them in a set of strategies"},"getOperatorsShares(address[],address[])":{"notice":"Returns the shares that a set of operators have delegated to them in a set of strategies"},"getQueuedWithdrawal(bytes32)":{"notice":"Returns the Withdrawal and corresponding shares associated with a `withdrawalRoot`"},"getQueuedWithdrawalRoots(address)":{"notice":"Returns a list of queued withdrawal roots for the `staker`. NOTE that this only returns withdrawals queued AFTER the slashing release."},"getQueuedWithdrawals(address)":{"notice":"Returns all queued withdrawals and their corresponding shares for a staker."},"getSlashableSharesInQueue(address,address)":{"notice":"Returns amount of withdrawable shares from an operator for a strategy that is still in the queue and therefore slashable. Note that the *actual* slashable amount could be less than this value as this doesn't account for amounts that have already been slashed. This assumes that none of the shares have been slashed."},"getWithdrawableShares(address,address[])":{"notice":"Given a staker and a set of strategies, return the shares they can queue for withdrawal and the corresponding depositShares. This value depends on which operator the staker is delegated to. The shares amount returned is the actual amount of Strategy shares the staker would receive (subject to each strategy's underlying shares to token ratio)."},"increaseDelegatedShares(address,address,uint256,uint256)":{"notice":"Called by a share manager when a staker's deposit share balance in a strategy increases. This method delegates any new shares to an operator (if applicable), and updates the staker's deposit scaling factor regardless."},"isDelegated(address)":{"notice":"Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise."},"isOperator(address)":{"notice":"Returns true is an operator has previously registered for delegation."},"minWithdrawalDelayBlocks()":{"notice":"Returns the minimum withdrawal delay in blocks to pass for withdrawals queued to be completable. Also applies to legacy withdrawals so any withdrawals not completed prior to the slashing upgrade will be subject to this longer delay."},"modifyOperatorDetails(address,address)":{"notice":"Updates an operator's stored `delegationApprover`."},"operatorShares(address,address)":{"notice":"Tracks the current balance of shares an `operator` is delegated according to each `strategy`. Updated by both the `StrategyManager` and `EigenPodManager` when a staker's delegatable balance changes, and by the `AllocationManager` when the `operator` is slashed."},"queueWithdrawals((address[],uint256[],address)[])":{"notice":"Allows a staker to queue a withdrawal of their deposit shares. The withdrawal can be completed after the MIN_WITHDRAWAL_DELAY_BLOCKS via either of the completeQueuedWithdrawal methods. While in the queue, these shares are removed from the staker's balance, as well as from their operator's delegated share balance (if applicable). Note that while in the queue, deposit shares are still subject to slashing. If any slashing has occurred, the shares received may be less than the queued deposit shares."},"redelegate(address,(bytes,uint256),bytes32)":{"notice":"Undelegates the staker from their current operator, and redelegates to `newOperator` Queues a withdrawal for all of the staker's withdrawable shares. These shares will only be delegated to `newOperator` AFTER the withdrawal is completed."},"registerAsOperator(address,uint32,string)":{"notice":"Registers the caller as an operator in EigenLayer."},"slashOperatorShares(address,address,uint64,uint64)":{"notice":"Decreases the operators shares in storage after a slash and increases the burnable shares by calling into either the StrategyManager or EigenPodManager (if the strategy is beaconChainETH)."},"strategyManager()":{"notice":"The StrategyManager contract for EigenLayer"},"undelegate(address)":{"notice":"Undelegates the staker from their operator and queues a withdrawal for all of their shares"},"updateOperatorMetadataURI(address,string)":{"notice":"Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated."},"version()":{"notice":"Returns the semantic version string of the contract."}},"version":1}},"settings":{"remappings":["@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/","openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/","zeus-templates/=lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/contracts/core/DelegationManagerStorage.sol":"DelegationManagerStorage"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/MathUpgradeable.sol":{"keccak256":"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e","urls":["bzz-raw://2b2835c737d073ef8b82a4cc246495a9740f43e7ff2cf130906b2449ff9bfb91","dweb:/ipfs/QmSCWfNoSvvTN57ic7o1RW6NqSxxGAqbBTnLKc7QHe27qB"],"license":"MIT"},"lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/utils/math/SafeCastUpgradeable.sol":{"keccak256":"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b","urls":["bzz-raw://ef883699a00970d5469e502514e2854704cd53d7a49825078aa807a2f056315c","dweb:/ipfs/QmRjpN9oxgw6zHCVjfWNB9MzaYpNPPgqu7Rrwqwabmhpis"],"license":"MIT"},"lib/openzeppelin-contracts-v4.9.0/contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61","urls":["bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354","dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"],"license":"MIT"},"lib/openzeppelin-contracts-v4.9.0/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305","urls":["bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5","dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"],"license":"MIT"},"lib/openzeppelin-contracts-v4.9.0/contracts/utils/math/Math.sol":{"keccak256":"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3","urls":["bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c","dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"],"license":"MIT"},"lib/openzeppelin-contracts-v4.9.0/contracts/utils/structs/EnumerableSet.sol":{"keccak256":"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514","urls":["bzz-raw://20bf19b2b851f58a4c24543de80ae70b3e08621f9230eb335dc75e2d4f43f5df","dweb:/ipfs/QmSYuH1AhvJkPK8hNvoPqtExBcgTB42pPRHgTHkS5c5zYW"],"license":"MIT"},"src/contracts/core/DelegationManagerStorage.sol":{"keccak256":"0x70c3dbbf282eec1756f2da9f780ca9fa7db60c1cf317e57f873bdb20e42be1f9","urls":["bzz-raw://69618b02f1e499d3c59614fb2560d445cfa563069738d884e3086681e0c24505","dweb:/ipfs/QmRcD8rDpSG7pR9VmToZtkXnFfJemrwnGaMiaTkW6YVgfY"],"license":"BUSL-1.1"},"src/contracts/interfaces/IAVSRegistrar.sol":{"keccak256":"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d","urls":["bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc","dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm"],"license":"BUSL-1.1"},"src/contracts/interfaces/IAllocationManager.sol":{"keccak256":"0x9f95d00bc0a22ec850e5cc6bcda9db2485f87b627232f9360571dbe87a0ee035","urls":["bzz-raw://96d1e4f044b7337f83f970202b5ce5154970bb8745646b5c0e51cab58713c811","dweb:/ipfs/QmX7mkfacMVKKXJB5GixQqtfYJ3jCkQzTRu4eUy4RjBNeM"],"license":"BUSL-1.1"},"src/contracts/interfaces/IDelegationManager.sol":{"keccak256":"0xd8a2913e40e1cb3e97eb3ddabd26dab72854de8b47c0fd438808b5bd2be2ca20","urls":["bzz-raw://26d520cecf61b994a11ad8a009570e71736daeb3f73e1983d2f85ff6a725ab82","dweb:/ipfs/QmWjQbNJJaW1H3e3GYcoATfoSjYMoZcjjrc7eA3nHDWYDf"],"license":"BUSL-1.1"},"src/contracts/interfaces/IETHPOSDeposit.sol":{"keccak256":"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c","urls":["bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91","dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz"],"license":"CC0-1.0"},"src/contracts/interfaces/IEigenPod.sol":{"keccak256":"0x3d4118c7aa962ea8cfe15fd8b1b0ee160421506e036d96a8b09c9cc957fff31c","urls":["bzz-raw://51e444895bea318e1c0f6d8d5b092330d0c42b52a95e1935d868e599abd1795e","dweb:/ipfs/Qmd8ozg2SXqSM72ddFmSZm5yqKMcaxQ31ifAhqWrUazWwj"],"license":"BUSL-1.1"},"src/contracts/interfaces/IEigenPodManager.sol":{"keccak256":"0xa2e18dbfd63c3211158f916b669bd74066388564a2f019e952953bc5390e1466","urls":["bzz-raw://c86e9d4426aa20892ffc660793e8ce6e881de02cc6a0b483efaa06f14a7df864","dweb:/ipfs/QmQbvkto6g9EeRMfU4bPcuAh1Tz3ohGFpHyHS8GA8mZiFN"],"license":"BUSL-1.1"},"src/contracts/interfaces/IPausable.sol":{"keccak256":"0x0404f1db44005929899e00dcc50d553175951ff26c215c87215bbd92b4ebfde3","urls":["bzz-raw://cdb88bff60663f3418d271c7db93c2867d767e31ec592690e7b2e1f1ba1589e8","dweb:/ipfs/QmQfsZCiEqWYEFopZB5LvL9pq47Qba9EeMzeZcHN2e9ypc"],"license":"BUSL-1.1"},"src/contracts/interfaces/IPauserRegistry.sol":{"keccak256":"0x705c371129ac08b9b035c1c1a1572a5e3a61b48dda8b7d8d974a7bfb88ecb7fc","urls":["bzz-raw://bdb894c26fcf1b83024d006b0573663286e50d857c5dea89a9149552a971da72","dweb:/ipfs/QmdqWnSPmeF9mV96uWMSN8AhVi64U818GRwFEqr6dP3UMD"],"license":"BUSL-1.1"},"src/contracts/interfaces/ISemVerMixin.sol":{"keccak256":"0xcb910d9afbaf14c2ec32828e28ca72f1dba35c7371f487505d2a73da2c576009","urls":["bzz-raw://d801fbeeb84ce1dde84dcfa85d519b726f8ba928c76dc4b24d9317299a7a1ab0","dweb:/ipfs/QmfAVYxxJry6GTML7jtQfoR4H1ZFpF6XYSpFZHZ8QTC61B"],"license":"BUSL-1.1"},"src/contracts/interfaces/IShareManager.sol":{"keccak256":"0xa331e73e99af7eb38befbd7e1d1024d7d9b2c6cc2534313672d1f937ee9fdaaa","urls":["bzz-raw://77fada64905d51779609546ba527834aff7d4478ff26df6f33abfe4a57ba028c","dweb:/ipfs/QmerLh58EpALrjvbgdVAbXJz9uCHukBKyS1MeVsEPo1ytS"],"license":"BUSL-1.1"},"src/contracts/interfaces/ISignatureUtilsMixin.sol":{"keccak256":"0x5223940241400e601b40ef9b544569262aa96cd9b05efd41fdaa4eb815d1b95b","urls":["bzz-raw://c993c65dbb74ecf6428aa73535a01a5663f4f4f536611e070b2e78937c19af10","dweb:/ipfs/QmaDsP63uGvoXjrGPYtbcZyUPEEspq9QChZeP1BYrn6FcE"],"license":"BUSL-1.1"},"src/contracts/interfaces/IStrategy.sol":{"keccak256":"0xbf084857bc21f2e3752072df667a3025ba73431eaa56852562b0dc3594361d75","urls":["bzz-raw://8a5eb881299b8949063e8d7eecdadbae92f3c84a129aa58b2e5f995714fb3b23","dweb:/ipfs/QmRsG6BgSS3UcXMDjjucKaNvzGjHa85ph22atnz6hzW9xo"],"license":"BUSL-1.1"},"src/contracts/interfaces/IStrategyManager.sol":{"keccak256":"0x9989483e1c623b3d62b3fe28ca6255577552d85f8ab916fd35559bbad6898a2f","urls":["bzz-raw://97084919a9b4c2e30cd1c529c7c21b6274d3ebf2e52e29e612709f6ea8a8ee8f","dweb:/ipfs/QmbdvS23Qe3RLuzPmFndHzmRdnRWtPYiwEBLKwWdUeYkiF"],"license":"BUSL-1.1"},"src/contracts/libraries/BeaconChainProofs.sol":{"keccak256":"0xff027b027df59b9d66f69951ff7a52f77ea3a30cda6c8f9b80f02680925484db","urls":["bzz-raw://0660cd206c833fdbd84837479e77e69bd29afa34707ed5819604c8d37d9aa828","dweb:/ipfs/QmcUxK7pNDL4ZN2r913fG446hF8snEEVzWJZisedd2zxGc"],"license":"BUSL-1.1"},"src/contracts/libraries/Endian.sol":{"keccak256":"0xe8ec0e6bef36311170e2447bdd2fe8b19aad7244024926243428ffe02754b136","urls":["bzz-raw://a628118c581ef8393ff09e50d0db45470bed040c45ed463f71144ef344fee48e","dweb:/ipfs/QmUz7nTJfzXKL2Sy175LPHNeUfKFHGarWvJFeCG4ZBqRuX"],"license":"BUSL-1.1"},"src/contracts/libraries/Merkle.sol":{"keccak256":"0xf6ef9925d5a6db7de81efac1e85b2a4ec64249abc13d4a2ff3ff73e41c8df436","urls":["bzz-raw://2d3e5dc3ef9a117ac18ac2c0371d34b948d3e1e93c0eba6dbb7a75a1e15abfc6","dweb:/ipfs/QmT4PrXoTJpnTNUxvXk3r4tzrfzSUYg4Lr2GyWNWeVXhAk"],"license":"MIT"},"src/contracts/libraries/OperatorSetLib.sol":{"keccak256":"0x551df2d7984470e6eaa774d058c3f2af0175044b720aa53a6a156c90881f1812","urls":["bzz-raw://eedb749fda40d45b8803694665d96fb5bec3b010d25cff4baad6e796ac690e41","dweb:/ipfs/QmUNG8gmC6CjrdazKbwqt7fyaBGNbqeEUA4iFka49egGZx"],"license":"BUSL-1.1"},"src/contracts/libraries/SlashingLib.sol":{"keccak256":"0xe73a53cfd201425b8230c1a9ba91ea7b12315828715c93216d3c9de0d64e0e04","urls":["bzz-raw://615749ec37dc7311a76f51519892e3f4a8c56a90d6f7283d8eec79628385b071","dweb:/ipfs/QmdGVLsmXASwLVVNK9uyHpuN816M7YFqEP4TWCUVu1HXLG"],"license":"BUSL-1.1"},"src/contracts/libraries/Snapshots.sol":{"keccak256":"0x27e0e9ed30a530ebeb197254d4a7e5a47bfcb1fc2863d0033f853a997dd231c6","urls":["bzz-raw://8f0627df417303e2cdae3df24026798bda09926846dba07e5228893559684e8b","dweb:/ipfs/QmboVLG81jcuXYjr2aygnQM2aPUiT6jQkHWMajftoxaMZY"],"license":"MIT"}},"version":1},"id":123}