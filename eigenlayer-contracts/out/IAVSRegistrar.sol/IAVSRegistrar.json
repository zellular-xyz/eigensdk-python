{"abi":[{"type":"function","name":"deregisterOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerOperator","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"avs","type":"address","internalType":"address"},{"name":"operatorSetIds","type":"uint32[]","internalType":"uint32[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsAVS","inputs":[{"name":"avs","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deregisterOperator(address,address,uint32[])":"303ca956","registerOperator(address,address,uint32[],bytes)":"c63fd502","supportsAVS(address)":"b5265787"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"operatorSetIds\",\"type\":\"uint32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"avs\",\"type\":\"address\"}],\"name\":\"supportsAVS\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deregisterOperator(address,address,uint32[])\":{\"params\":{\"avs\":\"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()\",\"operator\":\"the deregistering operator\",\"operatorSetIds\":\"the list of operator set ids being deregistered from\"}},\"registerOperator(address,address,uint32[],bytes)\":{\"params\":{\"avs\":\"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()\",\"data\":\"arbitrary data the operator can provide as part of registration\",\"operator\":\"the registering operator\",\"operatorSetIds\":\"the list of operator set ids being registered for\"}},\"supportsAVS(address)\":{\"params\":{\"avs\":\"the AVS to check\"},\"returns\":{\"_0\":\"true if the AVS is supported, false otherwise\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deregisterOperator(address,address,uint32[])\":{\"notice\":\"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored.\"},\"registerOperator(address,address,uint32[],bytes)\":{\"notice\":\"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful.\"},\"supportsAVS(address)\":{\"notice\":\"Returns true if the AVS is supported by the registrar\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/interfaces/IAVSRegistrar.sol\":\"IAVSRegistrar\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/\",\":ds-test/=lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\":openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\",\":zeus-templates/=lib/zeus-templates/src/\"]},\"sources\":{\"src/contracts/interfaces/IAVSRegistrar.sol\":{\"keccak256\":\"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc\",\"dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"}],"stateMutability":"nonpayable","type":"function","name":"deregisterOperator"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"avs","type":"address"},{"internalType":"uint32[]","name":"operatorSetIds","type":"uint32[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerOperator"},{"inputs":[{"internalType":"address","name":"avs","type":"address"}],"stateMutability":"view","type":"function","name":"supportsAVS","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"deregisterOperator(address,address,uint32[])":{"params":{"avs":"the AVS the operator is deregistering from. This should be the same as IAVSRegistrar.avs()","operator":"the deregistering operator","operatorSetIds":"the list of operator set ids being deregistered from"}},"registerOperator(address,address,uint32[],bytes)":{"params":{"avs":"the AVS the operator is registering for. This should be the same as IAVSRegistrar.avs()","data":"arbitrary data the operator can provide as part of registration","operator":"the registering operator","operatorSetIds":"the list of operator set ids being registered for"}},"supportsAVS(address)":{"params":{"avs":"the AVS to check"},"returns":{"_0":"true if the AVS is supported, false otherwise"}}},"version":1},"userdoc":{"kind":"user","methods":{"deregisterOperator(address,address,uint32[])":{"notice":"Called by the AllocationManager when an operator is deregistered from one or more operator sets. If this method reverts, it is ignored."},"registerOperator(address,address,uint32[],bytes)":{"notice":"Called by the AllocationManager when an operator wants to register for one or more operator sets. This method should revert if registration is unsuccessful."},"supportsAVS(address)":{"notice":"Returns true if the AVS is supported by the registrar"}},"version":1}},"settings":{"remappings":["@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","@openzeppelin/=lib/openzeppelin-contracts-v4.9.0/","ds-test/=lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/","openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/","openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/","zeus-templates/=lib/zeus-templates/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/contracts/interfaces/IAVSRegistrar.sol":"IAVSRegistrar"},"evmVersion":"cancun","libraries":{}},"sources":{"src/contracts/interfaces/IAVSRegistrar.sol":{"keccak256":"0xbb209da899a3379d83c18eabd4760e3385b999f640bdfcc25ce3fa5c1edc166d","urls":["bzz-raw://5a2c745f7ea19dbbd7248a98c39385f7e4aeb9e86975393f249e1aa3804598dc","dweb:/ipfs/QmdeyCYp5EhJNCjsx8ydFxyqwdpFwpj4iiVoesQVKvsRjm"],"license":"BUSL-1.1"}},"version":1},"id":129}